[alias]
    # View the SHA, description, and history graph
    l = log --pretty=oneline --graph
    # View SHA, description, relative date, and committer
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    # View SHA, description, absolute date, and committer
    ld = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=local
    # View the current working tree status using the short format
    s = status -s
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Clone a repository including all submodules
    c = clone --recursive
    # Commit all changes
    ca = !git add -A && git commit -av
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    # Show local-only (no remotes) branches
    localbranches = "!git for-each-ref --format=\"%(refname:short) %(upstream)\" refs/heads | grep -v 'refs\\/remotes'"
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Undo a `git push`
    undopush = push -f origin HEAD^:master
    # Show files changed in a given commit
    files = "!f() { git diff-tree --no-commit-id --name-status -r ${1-HEAD}; }; f"
    # Fetch all
    fa = fetch --all
    # Fetch origin
    fo = fetch origin
    # Fetch upstream
    fu = fetch upstream
    # Unstage and discard changes
    dump = "!d() { git reset HEAD $1 && git checkout -- $1; }; d"
    # Stash all the things before checking out
    co = "!sh -c 'git stash; git stash apply; git checkout \"$*\"'"
    # List branches by last modified
    latest = for-each-ref --sort=-committerdate refs/heads/ --format="%(authordate:short)%09%(objectname:short)%09%1B[0;33m%(refname:short)%1B[m%09"
    # Pull in remote changes and do a fast-forward-only merge of the current branch
    up = "!git remote update -p; git merge --ff-only @{u}"
    # Search all the things
    spelunk = "!s() { git grep $1 $(git rev-list --all); }; s"

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    # Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
    whitespace = space-before-tab,trailing-space
    autocrlf = input

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[credential]
    helper = osxkeychain

[diff]
    tool = opendiff

[push]
    default = current

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    tool = opendiff

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
    remote = origin
    merge = refs/heads/master

# URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"

# Include sensitive config
[include]
    path = ./.gituser

[hub]
    protocol = https
